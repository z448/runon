#!/usr/bin/env perl

use 5.010;
use warnings;
use strict;

use Term::ANSIColor;
use Data::Dumper;
use JSON::PP;
use open qw<:encoding(UTF-8)>;

# for verbose output change RUNON_DEBUG to 1;
$ENV{RUNON_DEBUG} = 1;
 

sub read_config {
    my $path = shift;
    local $/;
    open(my $fh,"<", $path) || die "cant open $path: $!";
    my $json = <$fh>;
    my $p = decode_json $json;
}

sub filter {
    my $keyword = shift;

    my $keyword_length = length $keyword;
    my $config = read_config('.apps.json');
    my @filtered = ();
    my %filter = ();

    die "min 3 characters required" if $keyword_length <= 2;
    if($keyword_length >= 3){
        say "keyword: " . substr( $keyword, 0, 3) if $ENV{RUNON_DEBUG};
        @filtered = grep { substr($_->{application}, 0, 3) eq substr( $keyword, 0, 3) } @$config;
    } 
    if($keyword_length >= 4){
        say "keyword: " . substr($keyword, 3, 1) if $ENV{RUNON_DEBUG};
        @filtered = grep { substr( $_->{region}, 0, 1 ) eq substr($keyword, 3, 1) } @filtered;
    }
    if($keyword_length >= 5){
        say "keyword: " . substr( $keyword, 4, 1) if $ENV{RUNON_DEBUG};
        @filtered = grep { substr( $_->{environment}, 0, 1 ) eq substr( $keyword, 4, 1) } @filtered;
    }
    return \@filtered;
}

sub printer {
    my $keyword = shift;
    my $results = filter($keyword);

    for(@$results){
        say colored(['white on_blue'],$_->{application}) . "  " . $_->{region} . "  " . $_->{environment};
    }
}

printer("$ARGV[0]");

