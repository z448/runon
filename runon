#!/usr/bin/env perl

use 5.010;
use warnings;
use strict;

use List::MoreUtils qw< uniq >;
use Term::ANSIColor;
use Data::Dumper;
use JSON::PP;
use open qw<:encoding(UTF-8)>;

# for verbose output change RUNON_DEBUG to 1;
$ENV{RUNON_DEBUG} = 1;
my $config = read_config('.runon');
my %max_len = %{ max_len() };
my %c = ( default => 'white on_blue', select => 'blue on_white', );
#my %c = ( default => 'white on_grey3', select => 'white on_grey6', );
#my $config = read_config('.apps.json');


sub read_config {
    my $path = shift;
    local $/;
    open(my $fh,"<", $path) || die "cant open $path: $!";
    my $json = <$fh>;
    my $p = decode_json $json;
}

sub max_len {
    my (@environment, @region, @hostname, %max_len) = ();

    for(@$config){ 
        push @environment, $_->{environment};
        push @hostname, $_->{hostname};
        push @region, $_->{region};
    }
    my $test = length join('', uniq @environment);
    say $test;
    $max_len{environment} = length( join('', uniq @environment) );
    $max_len{region} = length( join('', uniq @region) );
    $max_len{hostname} = length( join('', uniq @hostname) );
    \%max_len;
}



sub filter {
    my $keyword = shift;
    my( @filtered, %filter ) = ();
    my $keylength = length $keyword;

    say length join('', my @region_length = grep { $_->{environment} } @$config);

    die "min 3 characters required" if $keylength <= 2;
    if($keylength >= 3){
        say "keyword: " . substr( $keyword, 0, 3) if $ENV{RUNON_DEBUG};
        @filtered = grep { substr(lc $_->{application}, 0, 3) eq substr( lc $keyword, 0, 3) } @$config;
        #@filtered = grep { substr($_->{application}, 0, 3) eq substr( $keyword, 0, 3) } @$config;
    } 
    if($keylength >= 4){
        say "keyword: " . substr($keyword, 3, 1) if $ENV{RUNON_DEBUG};
        @filtered = grep { substr( lc $_->{region}, 0, 1 ) eq substr(lc $keyword, 3, 1) } @filtered;
        #@filtered = grep { substr( $_->{region}, 0, 1 ) eq substr($keyword, 3, 1) } @filtered;
    }
    if($keylength >= 5){
        say "keyword: " . substr( $keyword, 4, 1) if $ENV{RUNON_DEBUG};
        @filtered = grep { substr( lc $_->{environment}, 0, 1 ) eq substr( lc $keyword, 4, 1) } @filtered;
        #@filtered = grep { substr( $_->{environment}, 0, 1 ) eq substr( $keyword, 4, 1) } @filtered;
    }
    return \@filtered, $keylength;
}

sub array_length {
        return length join('', @{$_[0]});
}



sub relay {
    my $keyword = shift;
    my( @region, @environment, @host ) = ();
    my( $results, $keylength )  = filter($keyword);

    for(@$results){
        push @region, $_->{region};
        push @environment, $_->{environment};
        push @host, $_->{hostname};
    }
    # has to be uniq otherwise it would display AMER - AMER if there is App only in AMER region but on more environments
    @region = uniq @region; @environment = uniq @environment; 

    system("clear");
    my $host_nr = colored([$c{select}], $#host + 1); # number of filtered hosts
    my $joint = colored([$c{default}],' ');
    if($keylength == 3){
        my $line = join( $joint, 
            ( colored([$c{default}], $$results[0]->{application}) , colored([$c{select}],join(' - ',@region)) , colored([$c{default}],join(' - ',@environment)) , colored([$c{default}],join(' ',@host)), colored([$c{select}], $#host + 1) )
        );
        print $line . "\n";
    } 

    elsif($keylength == 4){
        my $line = join( $joint,
            ( colored([$c{default}], $$results[0]->{application}) , colored([$c{default}],join(' - ',@region)) , colored([$c{select}],join(' - ',@environment)) , colored([$c{default}],join(' ',@host)), colored([$c{select}], $#host + 1) )
        );
        print $line . "\n";
    }

    elsif($keylength == 5){
        # make host string adding index nr to each for selection
        my $host = colored([$c{default}],' '); my $h = 0;
        for( @host ){ 
            $host .= colored([$c{select}],$h) . colored([$c{default}],$_);
            $h++;
        }

        my $line = join( $joint,
            ( colored([$c{default}], $$results[0]->{application}) , colored([$c{default}],join(' - ',@region)) , colored([$c{default}],join(' - ',@environment)) , $host, colored([$c{select}], $#host + 1) )
        );
        print $line . "\n";
    }
}

relay("$ARGV[0]");

